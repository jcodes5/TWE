// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  password  String
  role      UserRole @default(VOLUNTEER)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth tokens
  refreshTokens RefreshToken[]

  // Related data
  campaigns        Campaign[]
  donations        Donation[]
  blogPosts        BlogPost[]
  comments         Comment[]
  assignedContacts Contact[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique @db.VarChar(500)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Campaign {
  id          String         @id @default(cuid())
  title       String
  description String
  content     String
  image       String?
  goal        Float
  raised      Float          @default(0)
  category    String
  location    String
  status      CampaignStatus @default(DRAFT)
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  createdBy User       @relation(fields: [createdById], references: [id])
  donations Donation[]

  @@map("campaigns")
}

model Donation {
  id         String   @id @default(cuid())
  amount     Float
  campaignId String
  userId     String
  createdAt  DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@map("donations")
}

model BlogPost {
  id        String     @id @default(cuid())
  title     String
  content   String
  excerpt   String?
  image     String?
  category  String
  status    PostStatus @default(DRAFT)
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]

  @@map("blog_posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

enum UserRole {
  ADMIN
  VOLUNTEER
  SPONSOR
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  ARCHIVED
}

model Contact {
  id           String        @id @default(cuid())
  name         String
  email        String
  phone        String?
  organization String?
  subject      String
  message      String
  inquiryType  String
  status       ContactStatus @default(NEW)
  createdAt    DateTime      @default(now())
  assignedToId String?
  assignedTo   User?         @relation(fields: [assignedToId], references: [id])

  @@map("contacts")
}
